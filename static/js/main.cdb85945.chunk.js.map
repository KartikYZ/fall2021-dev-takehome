{"version":3,"sources":["components/TagItem.tsx","components/Form.tsx","util.ts","components/TodoListItem.tsx","components/MultiSelectFilter.tsx","components/TodoList.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["TagItem","props","style","border","onClick","handleClick","id","name","Form","useState","title","setTitle","tags","setTags","tagInput","setTagInput","date","setDate","removeTag","remainingTags","filter","task","tagsList","map","tag","onSubmit","e","preventDefault","newTask","dueDate","tagList","completed","nanoid","addTask","handleFormSubmit","htmlFor","type","onChange","target","value","onTitleChange","onTagInputChange","newTags","split","trim","tagString","addTags","selected","newDate","Date","placeholderText","taskCompletedComparator","a","b","x","y","taskDateComparator","TodoListItem","getMonth","getDate","getFullYear","checked","toggleTaskCompleted","idx","padding","margin","MultiSelectFilter","options","labelledBy","TodoList","tasks","setTasks","globalTags","setGlobalTags","selectedTags","setSelectedTags","React","selections","setSelections","updatedTasks","renderTasks","console","log","sTag","length","filterOptions","label","arr","seen","Set","item","has","add","getUniqueFromArray","ToggleButtonGroup","event","newSelections","sort","ToggleButton","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cdb85945.chunk.js","sourcesContent":["import React from \"react\";\n\nexport type Tag = {\n    id: string,\n    name: string\n    handleClick: (id: string) => void\n}\n\nexport function TagItem(props: Tag) {\n\n    return (\n        <span style={{border: \"1px solid black\"}} onClick={() => props.handleClick(props.id)}>\n            x {props.name}\n        </span>\n    );\n}","import React, { useState } from \"react\";\nimport { TagItem } from \"./TagItem\";\nimport { nanoid } from \"nanoid\";\nimport DatePicker from \"react-datepicker\";\n\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport './styles.css';\n\nexport type FormProps = {\n    tags: TagItemType[]\n    addTask: (item: TodoItem) => void\n}\n\nexport type TagItemType = {\n    id: string,\n    name: string\n}\n\nexport type TodoItem = {\n    title: string,\n    dueDate: Date,\n    tagList: string[],\n    completed: boolean,\n    id: string\n}\n\nexport function Form(props: FormProps) {\n    const [title, setTitle] = useState<string>('');\n    const [tags, setTags] = useState<TagItemType[]>(props.tags);\n    const [tagInput, setTagInput] = useState<string>('');\n    const [date, setDate] = useState<Date | null>(null);\n\n    function handleFormSubmit(e: React.FormEvent) {\n        e.preventDefault();\n        if (title === \"\" || date === null) { return; }\n        \n        const newTask: TodoItem = {\n            title: title, \n            dueDate: date,\n            tagList: tags.map(tag => tag.name),\n            completed: false,\n            id: \"todo-\" + nanoid()\n        } \n        props.addTask(newTask);\n\n        setTitle('');\n        setTagInput('');\n        setDate(null);\n        setTags([]);\n    }\n\n    function handleTagSubmitOnClick() {\n        addTags(tagInput);\n        setTagInput('');\n    }\n\n    function addTags(tagInput: string | null) {\n        if (tagInput === null || tagInput === \"\") { return; }\n        const newTagStrings = tagInput.split(',').map(tag => tag.trim());\n        const newTags: TagItemType[] = newTagStrings.map(tagString => {\n            return {\n                id: \"tag-\" + nanoid(),\n                name: tagString\n            };\n        });\n        setTags([...tags, ...newTags]);\n    }\n\n    function removeTag(id: string) {\n        const remainingTags = tags.filter(task => task.id !== id);\n        setTags(remainingTags);\n    }\n\n    function onTitleChange(e: React.ChangeEvent<HTMLInputElement>) {\n        setTitle(e.target.value);\n    }\n\n    function onTagInputChange(e: React.ChangeEvent<HTMLInputElement>) {\n        setTagInput(e.target.value);\n    }\n\n    const tagsList = tags.map((tag) => (\n        <TagItem \n            id={tag.id} \n            name={tag.name} \n            handleClick={removeTag}\n            key={tag.id}\n        />\n    ));\n\n    return (\n        <div>\n            <h3>Create Task:</h3>\n            <form onSubmit={(e) => handleFormSubmit(e)}>\n                <div>\n                    <span><label htmlFor=\"title-input\">Title</label></span>\n                    <span>\n                        <input id=\"title-input\" type=\"text\" onChange={(e) => onTitleChange(e)} value={title}/>\n                    </span>\n                </div>\n                <div>\n                    <span><label htmlFor=\"tag-input\">Tags</label></span>\n                    <span>\n                        <input id=\"tag-input\" type=\"text\" onChange={(e) => onTagInputChange(e)} value={tagInput}/>\n                        <button type=\"button\" onClick={handleTagSubmitOnClick}>\n                            Create New Tag\n                        </button>\n                    </span>\n                </div>\n                <div>\n                    {tagsList}\n                </div>\n                <div>\n                    <span>Due Date</span>\n                        <DatePicker \n                            selected={date} \n                            onChange={(date) => {\n                                const newDate = date === null ? new Date() : date;\n                                setDate(newDate);\n                            }}\n                            placeholderText=\"mm/dd/yyyy\" \n                        />\n                </div>\n                <div>\n                    <button type=\"submit\">\n                        Create\n                    </button>\n                </div>\n            </form>\n        </div>\n    );\n}","import { TodoItem } from \"./components/Form\";\n\nexport function taskCompletedComparator(a: TodoItem, b: TodoItem): number {\n    const x = a.completed;\n    const y = b.completed;\n    if (x === y) {\n        return 0;\n    }\n    if (x !== y && x === true) {\n        return 1;\n    }\n    return -1;\n}\n\nexport function taskDateComparator(a: TodoItem, b: TodoItem): number {\n    return a.dueDate > b.dueDate ? 1 : -1;\n}\n\nexport function getUniqueFromArray(arr: string[]) {\n    var seen: Set<string> = new Set();\n    return arr.filter((item) => {\n        if (seen.has(item)) {\n            return false;\n        } \n        seen.add(item);\n        return true;\n    });\n}\n\nexport function dateToString(date: Date) {\n    const monthMap = [\n        'January',\n        'February',\n        'March',\n        'April',\n        'May',\n        'June',\n        'July',\n        'August',\n        'September',\n        'October',\n        'November',\n        'December',\n    ]\n    return monthMap[date.getMonth()] + ' ' + date.getDate() + ', ' + date.getFullYear();\n}","import React from \"react\";\nimport { dateToString } from \"../util\";\n\nexport type TodoListItemProps = {\n    title: string,\n    dueDate: Date,\n    tagList: string[],\n    completed: boolean,\n    toggleTaskCompleted: (id: string) => void,\n    id: string\n}\n\nexport function TodoListItem(props: TodoListItemProps) {\n    \n    return (\n        <div style={{border: \"1px solid black\"}}>\n            <h3>{props.title}</h3>\n            <h4>Due: {dateToString(props.dueDate)}</h4>\n            <label htmlFor={props.id}>Completed</label>\n            <input id={props.id} type=\"checkbox\" checked={props.completed} onChange={() => props.toggleTaskCompleted(props.id)}/>\n            <p>{props.tagList.map((tag, idx) => <span style={{border: '1px solid black', padding: '2px', margin: '5px'}}key={idx}>{tag}</span>)}</p>\n        </div>\n    );\n}","import { MultiSelect } from \"react-multi-select-component\";\nimport { Option } from \"react-multi-select-component/dist/types/lib/interfaces\";\n\nexport type MultiSelectFilterProps = {\n    options: Option[]\n    selected: Option[]\n    onChange: React.Dispatch<React.SetStateAction<Option[]>>\n}\n\nexport function MultiSelectFilter(props: MultiSelectFilterProps) {\n  return (\n    <div>\n      <h3>Filter</h3>\n      <MultiSelect\n        options={props.options}\n        value={props.selected}\n        onChange={props.onChange}\n        labelledBy=\"Select\"\n      />\n    </div>\n  );\n}","import React, { useState } from 'react'\n/**\n * Thank you for applying to Bits of Good. You are free to add/delete/modify any \n * parts of this project. That includes changing the types.ts, creating css files, \n * modifying import statements, using contexts, etc. We do recommend to keep it simple. \n * You will not be judged based on complexity. We also recommend using \n * multiple components instead of coding everything on this file :)\n * \n * Have fun! Please reach out to hello@bitsofgood.org or wkim330@gatech.edu if you\n * have any questions!\n * \n * Bits of Good Engineering Team\n * \n */\n// TODO: Start coding from here\n\n// Here's a baseline todo item type. \n// Feel free to extend or create your own interface!\n\nimport { Form } from './Form'\nimport { TodoListItem } from './TodoListItem';\nimport { TodoItem } from './Form';\n\nimport ToggleButton from '@mui/material/ToggleButton';\nimport ToggleButtonGroup from '@mui/material/ToggleButtonGroup';\nimport { MultiSelectFilter } from './MultiSelectFilter';\n\nimport { taskCompletedComparator, taskDateComparator, getUniqueFromArray } from '../util';\nimport { Option } from 'react-multi-select-component/dist/types/lib/interfaces';\n\nexport type TodoListProps = {\n  tasks: TodoItem[];\n}\n\nexport default function TodoList(props: TodoListProps) {\n\n  const [tasks, setTasks] = useState<TodoItem[]>(props.tasks);\n  const [globalTags, setGlobalTags] = useState<string[]>([]);\n  const [selectedTags, setSelectedTags] = useState<Option[]>([]);\n  const [selections, setSelections] = React.useState<string[]>([]);\n\n  const handleSelections = (event: React.MouseEvent<HTMLElement>, newSelections: string[]) => {\n    setSelections(newSelections);\n    if (newSelections.length === 2) {\n      // sort first by completedness, and then by date\n      setTasks(tasks.sort((a, b) => {\n        if (taskCompletedComparator(a, b) === 0) {\n          return taskDateComparator(a, b);\n        }\n        return taskCompletedComparator(a, b);\n      }));\n    } else if (newSelections.length === 1) {\n      if (newSelections[0] === 'date') {\n        // sort by date, item due earlier should appear first\n        setTasks(tasks.sort((a, b) => taskDateComparator(a, b)));\n      } else {\n        // sort by completed, incomplete item appears first\n        setTasks(tasks.sort((a, b) => taskCompletedComparator(a, b)));\n      }\n    }\n  };\n\n  function addTask(task: TodoItem) {\n    setGlobalTags(getUniqueFromArray([...globalTags, ...task.tagList]));\n    setTasks([...tasks, task]);\n  }\n\n  function toggleTaskCompleted(id: string) {\n    const updatedTasks = tasks.map(task => {\n      if (id === task.id) {\n        return {...task, completed: !task.completed}\n      }\n      return task;\n    });\n    setTasks(updatedTasks);\n  }  \n\n  const filteredTasks = tasks.filter(task => {\n    console.log(selectedTags);\n    console.log(task.tagList);\n    for (let tag of task.tagList) {\n      if (selectedTags.filter(sTag => tag === sTag.value).length === 0) {\n        return false;\n      }\n    }\n    return true;\n  });\n\n  const renderTasks = filteredTasks.map((task, idx) => (\n    <TodoListItem \n      title={task.title}\n      dueDate={task.dueDate}\n      tagList={task.tagList}\n      completed={task.completed}\n      id={task.id}\n      toggleTaskCompleted={toggleTaskCompleted}\n      key={idx}\n    />\n  ));\n\n  const filterOptions: Option[] = globalTags.map(tag => {\n    return {\n      label: tag,\n      value: tag\n    };\n  });\n  \n  return (\n    <div>\n      <h1>Todo List!</h1>\n      {/* Form */}\n      <Form tags={[]} addTask={addTask}/>\n      {/* Sort Buttons, these need to be toggle buttons */}  \n      <div>\n        <h3>Sort By</h3>\n        <ToggleButtonGroup\n          value={selections}\n          onChange={handleSelections}\n          aria-label=\"text formatting\"\n        >\n          <ToggleButton value=\"date\" aria-label=\"date\">\n            <h4>Date</h4>\n          </ToggleButton>\n          <ToggleButton value=\"completed\" aria-label=\"completed\">\n            <h4>Completed</h4>\n          </ToggleButton>\n        </ToggleButtonGroup>\n      </div>\n      \n      {/* Filter Buttons */}\n      <div>\n        {/* Dropdown filter */}\n        <MultiSelectFilter\n          options={filterOptions}\n          selected={selectedTags}\n          onChange={setSelectedTags}\n        />\n      </div>\n      {/* List */}\n      <ul>\n        {/* {renderTasks} */}\n        {renderTasks}\n      </ul>\n    </div>\n  )\n}\n","import './App.css';\nimport TodoList from './components/TodoList';\n\nfunction App() {\n  return (\n      <div className=\"App\">\n        <div>\n          <h3>Bits of Good Take-home Project</h3>\n          <h4>Created By: Kartik Sinha</h4>\n          <p>\n            *Note: This project implements the optional bonus 'filter' feature. By default, no tags are selected. \n            As a result, when adding tasks to the form, the filter dropdown needs to be initially set to \"Select All\" \n            so that all tasks are displayed at first. All other functionality works as specified in the ReadMe.\n          </p>\n        </div>\n        <TodoList tasks={[]}/>\n      </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}